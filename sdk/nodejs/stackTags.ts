// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StackTags extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'stacktags:index:StackTags';

    /**
     * Returns true if the given object is an instance of StackTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackTags.__pulumiType;
    }


    /**
     * Create a StackTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StackTagsArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["configNamespace"] = args ? args.configNamespace : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["stack"] = args ? args.stack : undefined;
        } else {
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StackTags.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a StackTags resource.
 */
export interface StackTagsArgs {
    /**
     * Optional if you're not using `<projectname>` as your namespace in your stack configuration you can set this here. If this is not set it will use the project name.
     */
    configNamespace?: pulumi.Input<string>;
    /**
     * Optional organization that the stack belongs to. If this is not set, then the organization of the current stack will be used.
     */
    organization?: pulumi.Input<string>;
    /**
     * Optional project that the stack belongs to. If this is not set, then the project that the current stack belongs to will be used.
     */
    project?: pulumi.Input<string>;
    /**
     * Optional stack to apply tags to. If this is not set then the current stack will be used.
     */
    stack?: pulumi.Input<string>;
}
