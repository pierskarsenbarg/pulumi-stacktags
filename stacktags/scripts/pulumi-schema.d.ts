/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes an object or resource property
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "propertySpec".
 */
export type PropertyDefinition = TypeReference;
/**
 * A reference to a type. The particular kind of type referenced is determined based on the contents of the "type" property and the presence or absence of the "additionalProperties", "items", "oneOf", and "$ref" properties.
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "typeSpec".
 */
export type TypeReference = PrimitiveType | ArrayType | MapType | NamedType | UnionType;
/**
 * The element type of the array
 */
export type TypeReference1 = PrimitiveType | ArrayType | MapType | NamedType | UnionType;
/**
 * The element type of the map. Defaults to "string" when omitted.
 */
export type TypeReference2 = PrimitiveType | ArrayType | MapType | NamedType | UnionType;
/**
 * Describes an object or enum type.
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "complexTypeSpec".
 */
export type TypeDefinition = ObjectTypeDefinition | EnumTypeDefinition;
export type ObjectTypeDefinition = ObjectTypeDetails;
/**
 * The provider type for this package.
 */
export type ResourceDefinition = ObjectTypeDetails;
/**
 * Describes a resource or component.
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "resourceSpec".
 */
export type ResourceDefinition1 = ObjectTypeDetails;
/**
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "token".
 */
export type Token = string;

/**
 * A description of the schema for a Pulumi Package
 */
export interface PulumiPackageMetaschema {
  /**
   * The unqualified name of the package (e.g. "aws", "azure", "gcp", "kubernetes", "random")
   */
  name: string;
  /**
   * The human-friendly name of the package.
   */
  displayName?: string;
  /**
   * The version of the package. The version must be valid semver.
   */
  version?: string;
  /**
   * The description of the package. Descriptions are interpreted as Markdown.
   */
  description?: string;
  /**
   * The list of keywords that are associated with the package, if any.
   */
  keywords?: string[];
  /**
   * The package's homepage.
   */
  homepage?: string;
  /**
   * The name of the license used for the package's contents.
   */
  license?: string;
  /**
   * Freeform text attribution of derived work, if required.
   */
  attribution?: string;
  /**
   * The URL at which the package's sources can be found.
   */
  repository?: string;
  /**
   * The URL of the package's logo, if any.
   */
  logoUrl?: string;
  /**
   * The URL to use when downloading the provider plugin binary.
   */
  pluginDownloadURL?: string;
  /**
   * The name of the person or organization that authored and published the package.
   */
  publisher?: string;
  /**
   * Format metadata about this package.
   */
  meta?: {
    /**
     * A regex that is used by the importer to extract a module name from the module portion of a type token. Packages that use the module format "namespace1/namespace2/.../namespaceN" do not need to specify a format. The regex must define one capturing group that contains the module name, which must be formatted as "namespace1/namespace2/...namespaceN".
     */
    moduleFormat: string;
  };
  /**
   * The package's configuration variables.
   */
  config?: {
    /**
     * A map from variable name to propertySpec that describes a package's configuration variables.
     */
    variables?: {
      [k: string]: PropertyDefinition;
    };
    /**
     * A list of the names of the package's non-required configuration variables.
     */
    defaults?: string[];
  };
  /**
   * A map from type token to complexTypeSpec that describes the set of complex types (i.e. object, enum) defined by this package.
   */
  types?: {
    [k: string]: TypeDefinition;
  };
  provider?: ResourceDefinition;
  /**
   * A map from type token to resourceSpec that describes the set of resources and components defined by this package.
   */
  resources?: {
    [k: string]: ResourceDefinition1;
  };
  /**
   * A map from token to functionSpec that describes the set of functions defined by this package.
   */
  functions?: {
    [k: string]: FunctionDefinition;
  };
  /**
   * Additional language-specific data about the package.
   */
  language?: {
    [k: string]: unknown;
  };
}
/**
 * A reference to a primitive type. A primitive type must have only the "type" property set.
 */
export interface PrimitiveType {
  /**
   * The primitive type, if any
   */
  type: "boolean" | "integer" | "number" | "string";
  additionalProperties?: never;
  items?: never;
  oneOf?: never;
  $ref?: never;
  [k: string]: unknown;
}
/**
 * A reference to an array type. The "type" property must be set to "array" and the "items" property must be present. No other properties may be present.
 */
export interface ArrayType {
  type: "array";
  items: TypeReference1;
  additionalProperties?: never;
  oneOf?: never;
  $ref?: never;
  [k: string]: unknown;
}
/**
 * A reference to a map type. The "type" property must be set to "object" and the "additionalProperties" property may be present. No other properties may be present.
 */
export interface MapType {
  type: "object";
  additionalProperties?: TypeReference2;
  items?: never;
  oneOf?: never;
  $ref?: never;
  [k: string]: unknown;
}
/**
 * A reference to a type in this or another document. The "$ref" property must be present. The "type" property is ignored if it is present. No other properties may be present.
 */
export interface NamedType {
  /**
   * ignored; present for compatibility with existing schemas
   */
  type?: string;
  /**
   * The URI of the referenced type. For example, the built-in Archive, Asset, and Any
   * types are referenced as "pulumi.json#/Archive", "pulumi.json#/Asset", and "pulumi.json#/Any", respectively.
   * A type from this document is referenced as "#/types/pulumi:type:token".
   * A type from another document is referenced as "path#/types/pulumi:type:token", where path is of the form:
   *   "/provider/vX.Y.Z/schema.json" or "pulumi.json" or "http[s]://example.com/provider/vX.Y.Z/schema.json"
   * A resource from this document is referenced as "#/resources/pulumi:type:token".
   * A resource from another document is referenced as "path#/resources/pulumi:type:token", where path is of the form:
   *   "/provider/vX.Y.Z/schema.json" or "pulumi.json" or "http[s]://example.com/provider/vX.Y.Z/schema.json"
   */
  $ref: string;
  additionalProperties?: never;
  items?: never;
  oneOf?: never;
  [k: string]: unknown;
}
/**
 * A reference to a union type. The "oneOf" property must be present. The union may additional specify an underlying primitive type via the "type" property and a discriminator via the "discriminator" property. No other properties may be present.
 */
export interface UnionType {
  /**
   * The underlying primitive type of the union, if any
   */
  type?: "boolean" | "integer" | "number" | "string";
  /**
   * If present, indicates that values of the type may be one of any of the listed types
   *
   * @minItems 2
   */
  oneOf: TypeReference[];
  /**
   * Informs the consumer of an alternative schema based on the value associated with it
   */
  discriminator?: {
    /**
     * PropertyName is the name of the property in the payload that will hold the discriminator value
     */
    propertyName: string;
    /**
     * an optional object to hold mappings between payload values and schema names or references
     */
    mapping?: {
      [k: string]: string;
    };
    [k: string]: unknown;
  };
  additionalProperties?: never;
  items?: never;
  $ref?: never;
  [k: string]: unknown;
}
/**
 * Describes an object type
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "objectTypeSpec".
 */
export interface ObjectTypeDetails {
  /**
   * A map from property name to propertySpec that describes the object's properties.
   */
  properties?: {
    [k: string]: PropertyDefinition;
  };
  /**
   * A list of the names of an object type's required properties. These properties must be set for inputs and will always be set for outputs.
   */
  required?: string[];
  [k: string]: unknown;
}
/**
 * Describes an enum type
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "enumTypeSpec".
 */
export interface EnumTypeDefinition {
  /**
   * The underlying primitive type of the enum
   */
  type: "boolean" | "integer" | "number" | "string";
  /**
   * The list of possible values for the enum
   */
  enum: EnumValueDefinition[];
  [k: string]: unknown;
}
export interface EnumValueDefinition {
  /**
   * If present, overrides the name of the enum value that would usually be derived from the value.
   */
  name?: string;
  /**
   * The description of the enum value, if any. Interpreted as Markdown.
   */
  description?: string;
  /**
   * The enum value itself
   */
  value: boolean | number | number | string;
  /**
   * Indicates whether the value is deprecated.
   */
  deprecationMessage?: string;
  [k: string]: unknown;
}
/**
 * Describes a function.
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "functionSpec".
 */
export interface FunctionDefinition {
  /**
   * The description of the function, if any. Interpreted as Markdown.
   */
  description?: string;
  inputs?: ObjectTypeDetails1;
  /**
   * A list of parameter names that determines whether the input bag should be treated as a single argument or as multiple arguments. The list corresponds to the order in which the parameters should be passed to the function.
   */
  multiArgumentInputs?: string[];
  /**
   * Specifies the return type of the function definition.
   */
  outputs?: TypeReference | ObjectTypeDetails;
  /**
   * Indicates whether the function is deprecated
   */
  deprecationMessage?: string;
  /**
   * Additional language-specific data about the function.
   */
  language?: {
    [k: string]: unknown;
  };
  /**
   * Indicates that the implementation of the function should not be generated from the schema, and is instead provided out-of-band by the package author
   */
  isOverlay?: boolean;
  [k: string]: unknown;
}
/**
 * Describes an object type
 */
export interface ObjectTypeDetails1 {
  /**
   * A map from property name to propertySpec that describes the object's properties.
   */
  properties?: {
    [k: string]: PropertyDefinition;
  };
  /**
   * A list of the names of an object type's required properties. These properties must be set for inputs and will always be set for outputs.
   */
  required?: string[];
  [k: string]: unknown;
}
/**
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "schemaStringMap".
 */
export interface SchemaStringMap {
  [k: string]: string;
}
/**
 * Describes C# specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "csharpLanguageSpec".
 */
export interface CLanguageOverridesDefinition {
  compatibility?: string;
  namespaces?: SchemaStringMap;
  packageReferences?: SchemaStringMap;
  rootNamespace?: {
    [k: string]: unknown;
  };
  /**
   * Respect the Pkg.Version field for emitted code.
   */
  respectSchemaVersion?: boolean;
  [k: string]: unknown;
}
/**
 * Describes Go specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "goLanguageSpec".
 */
export interface GoLanguageOverridesDefinition {
  generateExtraInputTypes?: boolean;
  generateResourceContainerTypes?: boolean;
  /**
   * Base import path for the Go package
   */
  importBasePath?: string;
  /**
   * Respect the Pkg.Version field for emitted code.
   */
  respectSchemaVersion?: boolean;
  [k: string]: unknown;
}
/**
 * Describes NodeJS specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "nodejsLanguageSpec".
 */
export interface NodeJSLanguageOverridesDefinition {
  /**
   * NPM package name (includes @namespace)
   */
  packageName?: string;
  /**
   * NPM package description
   */
  packageDescription?: string;
  /**
   * Content of the generated package README.md file.
   */
  readme?: string;
  compatibility?: "tfbridge20";
  /**
   * NPM package dependencies
   */
  dependencies?: {
    [k: string]: string;
  };
  devDependencies?: SchemaStringMap1;
  disableUnionOutputTypes?: boolean;
  /**
   * Typescript Version
   */
  typescriptVersion?: string;
  /**
   * Respect the Pkg.Version field for emitted code.
   */
  respectSchemaVersion?: boolean;
  [k: string]: unknown;
}
/**
 * NPM package devDependencies
 */
export interface SchemaStringMap1 {
  [k: string]: string;
}
/**
 * Describes Python specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "pythonLanguageSpec".
 */
export interface PythonLanguageOverridesDefinition {
  /**
   * NPM package name (includes @namespace)
   */
  packageName?: string;
  /**
   * Content of the generated package README.md file.
   */
  readme?: string;
  compatibility?: "tfbridge20";
  requires?: SchemaStringMap2;
  /**
   * Respect the Pkg.Version field for emitted code.
   */
  respectSchemaVersion?: boolean;
  [k: string]: unknown;
}
/**
 * Python package dependencies for the generated Python SDK
 */
export interface SchemaStringMap2 {
  [k: string]: string;
}
/**
 * Describes Java specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "javaLanguageSpec".
 */
export interface JavaLanguageOverridesDefinition {
  packages?: SchemaStringMap;
  /**
   * Base Java package name for the generated Java provider SDK
   */
  basePackage?: string;
  /**
   * If set to "gradle" enables a generation of a basic set of Gradle build files.
   */
  buildFiles?: string;
  /**
   * Specifies Maven-style dependencies for the generated code.
   */
  dependencies?: {
    [k: string]: string;
  };
  /**
   * Enables the use of a given version of io.github.gradle-nexus.publish-plugin in the generated Gradle build files (only when `buildFiles="gradle")
   */
  gradleNexusPublishPluginVersion?: string;
  /**
   * generates a test section to enable `gradle test` command to run unit tests over the generated code. Supported values: "JUnitPlatform" (only when `buildFiles="gradle")
   */
  gradleTest?: "JUnitPlatform";
  [k: string]: unknown;
}
/**
 * Describes programming language specific settings
 *
 * This interface was referenced by `PulumiPackageMetaschema`'s JSON-Schema
 * via the `definition` "languageSpec".
 */
export interface LanguageOverridesDefinition {
  csharp?: CLanguageOverridesDefinition;
  go?: GoLanguageOverridesDefinition;
  nodejs?: NodeJSLanguageOverridesDefinition;
  python?: PythonLanguageOverridesDefinition;
  java?: JavaLanguageOverridesDefinition;
  [k: string]: unknown;
}
